// Generated by Selenium IDE
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Threading;
using Microsoft.Extensions.Options;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.DevTools.V104.Input;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;
using Point_Adjust_Robot.Core.Model;
using Point_Adjust_Robot.Core.Tools;
using Point_Adjust_Robot.Core.UseCases.Workshift;
using PoitAdjustRobotAPI.Core.Interface;
using PoitAdjustRobotAPI.Model;
using PoitAdjustRobotAPI.Service;

namespace PoitAdjustRobotAPI.Core.UseCases.Workshift
{
    public class Adjustment : IUseCase<Return<List<WorkShiftAdjustment>>>
    {
        public IWebDriver driver { get; private set; }
        public IDictionary<string, object> vars { get; private set; }
        public IJavaScriptExecutor js { get; private set; }
        public Return<List<WorkShiftAdjustment>> result { get; set; } = new Return<List<WorkShiftAdjustment>>() { content = new List<WorkShiftAdjustment>()};
        ChromeOptions options = new ChromeOptions();
        private List<WorkShiftAdjustment> workShiftList;
        WebDriverTools tools;

        public Adjustment(List<WorkShiftAdjustment> workShiftList)
        {
            this.workShiftList = workShiftList;
            // options.AddArguments("--headless", "--window-size=1552,832");
            options.AddArguments("--start-maximized");
            driver = new ChromeDriver(options);
            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();
        }

        public void Dispose()
        {
            driver.Quit();
        }

        public void DoWork()
        {
            string step = "Setando a organização Login";
            try
            {
                var start = DateTime.Now;
                int countSucess = 0;;
                
                step = "Fazendo login";
                var login = new Login(driver);
                tools = new WebDriverTools(driver);
                login.DoWork();

                if (!login.result)
                {
                    step = "Testando login pela segunda vez";
                    login.DoWork();
                    if (!login.result)
                        throw new ArgumentException("Falha no login");
                }

                step = "Iniciando inserção em massa de dados";
                foreach (var workShift in this.workShiftList)
                {

                    step = "Ajustando dados";
                    workShift.note = String.IsNullOrEmpty(workShift.note) ? "Nada a declarar." : workShift.note;

                    try
                    {
                        step = "Buscando usuário";
                        Thread.Sleep(1000);
                        var filter = new FilterEmployeeByMatriculation(driver, workShift.matriculation);
                        filter.DoWork();

                        step = "Selecionando tabela de ajustes.";
                        driver.FindElement(By.XPath("/html/body/core-main/div/div[2]/div[1]/div/div[1]/div[2]/div/div/div[2]/div[1]/div/div[2]/div/div/div/div[2]/div[3]/div/div[1]/div/div/div/div[3]/div/div/div/div/div[2]/h5/span[2]")).Click();
                        Thread.Sleep(2000);

                        step = "Procurando elemento na tabela";
                        tools.AwaitAndClick("/html/body/core-main/div/div[2]/div[1]/div/div[2]/sidebar/div/div[2]/div[2]/div[1]/ul/li[2]/a");
                        tools.Await("/html/body/core-main/div/div[2]/div[1]/div/div[2]/sidebar/div/div[2]/div[2]/div[2]/div/div[2]/div[2]/div[2]/div[1]/div[1]/div[3]");

                        string day = workShift.data.Split("/")[0] + " - ";
                        bool foundElementToEdit = false;

                        foreach(var elDate in driver.FindElements(By.ClassName("row_day")).ToList())
                        {
                            string text = elDate.Text;
                            if (!(text.Contains(day) && text.Contains(workShift.hour.Split(":")[0]))) continue;
                            foreach(var elTime in elDate.FindElements(By.ClassName("time")).ToList())
                            {
                                text = elTime.Text;
                                if (!text.Contains(workShift.hour.Split(":")[0])) continue;

                                elTime.Click();
                                Thread.Sleep(1000);
                                foundElementToEdit = true;
                                break;
                            }
                            break;
                        }

                        step = "Editando os valores.";
                        if (!foundElementToEdit)
                        {
                            step = "Clicando em plus.";
                            driver.FindElement(By.XPath("/html/body/core-main/div/div[2]/div[1]/div/div[2]/sidebar/div/div[2]/div[2]/div[1]/ul/li[2]/a")).Click();
                            Thread.Sleep(1500);

                            driver.FindElement(By.CssSelector(".row_day:nth-child(5) .col:nth-child(6)")).Click();
                            Thread.Sleep(2000);
                        
                        // }

                        step = "Inserindo Horas.";
                        var path = foundElementToEdit ?
                            "/html/body/core-main/div/div[2]/div[1]/div/div[2]/sidebar/div/div[2]/div[1]/div/div[2]/div[1]/div[3]/div[1]/div/div[2]/div[2]/div[2]/timepicker/input" :
                            "/html/body/core-main/div/div[2]/div[1]/div/div[2]/sidebar/div/div[2]/div[1]/div/div[2]/div[1]/div[3]/div[1]/div/div[2]/div/div[2]/timepicker/input";

                        var inputHour = tools.GetElement(path);
                        inputHour.Clear();

                        (string hour, string minutes) = workShift.GetHour();
                        inputHour.SendKeys(hour);
                        inputHour.SendKeys(minutes);

                        step = "Inserindo Data.";
                        path = foundElementToEdit ?
                            "/html/body/core-main/div/div[2]/div[1]/div/div[2]/sidebar/div/div[2]/div[1]/div/div[2]/div[1]/div[3]/div[1]/div/div[2]/div[2]/div[1]/datepicker/p/input" :
                            "/html/body/core-main/div/div[2]/div[1]/div/div[2]/sidebar/div/div[2]/div[1]/div/div[2]/div[1]/div[3]/div[1]/div/div[2]/div/div[1]/datepicker/p/input";

                        var inputData = driver.FindElement(By.XPath(path));
                        inputData.Clear();
                        inputData.SendKeys(workShift.data);

                        step = "Inserindo Referencia.";
                        path = foundElementToEdit ?
                            "/html/body/core-main/div/div[2]/div[1]/div/div[2]/sidebar/div/div[2]/div[1]/div/div[2]/div[1]/div[3]/div[1]/div/div[2]/div[2]/div[3]/datepicker/p/input" :
                            "/html/body/core-main/div/div[2]/div[1]/div/div[2]/sidebar/div/div[2]/div[1]/div/div[2]/div[1]/div[3]/div[1]/div/div[2]/div/div[3]/datepicker/p/input";

                        var inputReferencia = driver.FindElement(By.XPath(path));
                        inputReferencia.Clear();
                        inputReferencia.SendKeys(workShift.reference);

                        }
                        else
                        {
                            tools.AwaitAndClick("/html/body/core-main/div/div[2]/div[1]/div/div[2]/sidebar/div/div[2]/div[1]/div/div[2]/div[1]/div[3]/div[1]/div/div[2]/div[1]/div/label[2]");
                        }

                        step = "Selecionando uma opção.";
                        SelectElement selector;
                        var selectFound = tools.GetElement("/html/body/core-main/div/div[2]/div[1]/div/div[2]/sidebar/div/div[2]/div[1]/div/div[2]/div[1]/div[3]/div[1]/div/div[4]/div/div/select");
                        if (selectFound.Displayed)
                        {
                            selector = new SelectElement(selectFound);
                            selector.SelectByText(workShift.justification);
                        }

                        step = "Inserindo Observações.";
                        driver.FindElement(By.Id("note")).Click();
                        driver.FindElement(By.Id("note")).SendKeys(workShift.note);

                        driver.FindElement(By.LinkText("Confirmar")).Click();
                        Thread.Sleep(2000);
                        countSucess++;
                    }
                    catch(Exception e)
                    {
                        result.content.Add(workShift);
                        WriterLog.Write(e, $"Falha ao inserir a matrícula {workShift.matriculation}", step, "Adjustment");
                    }
                }

                Thread.Sleep(2000);
                driver.Quit();

                var time = DateTime.Now - start;

                this.result.message = GetResult(string.Format("{0:N}", time.TotalMinutes), countSucess);
            }
            catch (Exception e)
            {
                this.result.message = "Erro execução da requisição.";
                driver.Quit();
                WriterLog.Write(e, step, "", "Adjustment");
                throw new ArgumentException("Erro - step: " + step, e);
            }
        }

        private string GetResult(string time, int countSucess)
        {
            if (result.content.Count == 0)
                return $"{countSucess} registros inseridos em {time} minutos.";

            return $"{countSucess} inseridos e {result.content.Count} falharam em {time} minutos. Analise os dados da tabela para descobrir o possível problema. Você também pode analizar os logs para mais informações.";
        }
    }
}